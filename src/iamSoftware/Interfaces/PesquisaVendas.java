/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iamSoftware.Interfaces;

import iamSoftware.Classes.ClientesData;
import iamSoftware.Classes.ConexaoBD;
import iamSoftware.Classes.ContasPagarData;
import iamSoftware.Classes.FornecedorData;
import iamSoftware.Classes.NotaFiscalData;
import iamSoftware.Classes.ProdutosData;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ga_br
 */
public class PesquisaVendas extends javax.swing.JFrame {
    
    public static DefaultTableModel tblstatic;
    public static String data;
    String status = "Todos";
    /**
     * Creates new form Clientes
     */
    public PesquisaVendas() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        this.setLocationRelativeTo(null);
        jScrollPane1.getViewport().setBackground(Color.white);
        tblFornecedores.setBackground(Color.white);
        
        try {
            PreencherTabela();
        } catch (SQLException ex) {
            Logger.getLogger(PesquisaVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFornecedores = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        fieldPeriodoInicial = new javax.swing.JFormattedTextField();
        fieldPeriodoFinal = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboFormaPagamento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblFornecedores.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblFornecedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "Produto", "Quantidade", "Valor", "Tipo de Pagamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFornecedores.setGridColor(new java.awt.Color(0, 0, 0));
        tblFornecedores.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblFornecedores);
        if (tblFornecedores.getColumnModel().getColumnCount() > 0) {
            tblFornecedores.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jPanel4.setBackground(new java.awt.Color(79, 129, 199));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Pesquisa de Vendas");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(245, 135, 66));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Tipo de Pagamento:");

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/find.png"))); // NOI18N
        jButton7.setText("Buscar");
        jButton7.setFocusPainted(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        try {
            fieldPeriodoInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fieldPeriodoInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPeriodoInicialActionPerformed(evt);
            }
        });

        try {
            fieldPeriodoFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fieldPeriodoFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPeriodoFinalActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Período:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("a");

        comboFormaPagamento.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboFormaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dinheiro", "Cartão", "À Prazo", "Cheque", "Convenio" }));
        comboFormaPagamento.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldPeriodoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldPeriodoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(227, 227, 227))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldPeriodoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(comboFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldPeriodoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       
        String periodoInicial = fieldPeriodoInicial.getText();
        String periodoFinal = fieldPeriodoFinal.getText();
        String formPagamento = (String) comboFormaPagamento.getSelectedItem();
        
        try {
            BuscaDataTipoPagamento(periodoInicial, periodoFinal, formPagamento);
        } catch (SQLException ex) {
            Logger.getLogger(PesquisaVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void fieldPeriodoInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPeriodoInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPeriodoInicialActionPerformed

    private void fieldPeriodoFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPeriodoFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPeriodoFinalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PesquisaVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PesquisaVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PesquisaVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PesquisaVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PesquisaVendas().setVisible(true);
            }
        });
    }
    
    public void PreencherTabela() throws SQLException{
        
        DefaultTableModel tabela = (DefaultTableModel) tblFornecedores.getModel();
        
        tabela.setRowCount(0);
        
        //WHERE STR_TO_DATE(datapagamento, '%d/%m/%Y') BETWEEN STR_TO_DATE('16/10/2019', '%d/%m/%Y')AND STR_TO_DATE('10/12/2019', '%d/%m/%Y') ORDER BY STR_TO_DATE(datapagamento, '%d/%m/%Y') ASC
        
        String sql1 = "SELECT idcompra, formapagamento FROM `contasreceber` ";
          
        
        Connection conn = ConexaoBD.Conectar();           
        PreparedStatement stmt = conn.prepareStatement(sql1);
        ResultSet rs = stmt.executeQuery();
       
             
        while(rs.next()){
            Object[] dados = new Object[5];
            dados[0] = rs.getInt("idcompra");
            dados[4] = rs.getString("formapagamento");
            
            
            String sql2 = "SELECT produto, quantidade FROM `itenscompras` WHERE idcompra="+dados[0];
            PreparedStatement stmt2 = conn.prepareStatement(sql2);
            ResultSet rs2 = stmt2.executeQuery();
            
            while(rs2.next()){
                dados[1] = rs2.getString("produto");
                dados[2] = rs2.getDouble("quantidade");
                
                System.out.println(dados[1]);
                
                String sql3 = "SELECT valorVenda FROM produtos WHERE nome='"+dados[1]+"'";
                PreparedStatement stmt3 = conn.prepareStatement(sql3);
                ResultSet rs3 = stmt3.executeQuery();
                
                while(rs3.next()){
                    dados[3] = rs3.getDouble("valorVenda");
                    tabela.addRow(dados);
                }
                              
            }  
                       
            
        }       
    }
    
    public void PreencherTabela(String Status) throws SQLException{
        DefaultTableModel tabela = (DefaultTableModel) tblFornecedores.getModel();
        
        tabela.setRowCount(0);
        
        String sql = "SELECT * FROM `contaspagar` WHERE status= '"+Status+"' ORDER BY `vencimento` ASC";
        
        Connection conn = ConexaoBD.Conectar();           
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        
        List<ProdutosData> produtoslist = new ArrayList<ProdutosData>();
             
        while(rs.next()){
            Object[] dados = new Object[7];
            dados[0] = rs.getInt("id");                        
            dados[1] = rs.getString("numerodocumento");
            dados[2] = rs.getString("fornecedor");
            dados[3] = rs.getString("valor");
            dados[4] = rs.getString("numeroparcela");
            dados[5] = rs.getString("vencimento");
            
            String data = (String) dados[5];
            char[] dataArray = data.toCharArray();
            data = conveter(dataArray);
            dados[5] = data;            
            dados[6] = rs.getString("status");            
            
            tabela.addRow(dados);
        }       
    }
    
    public void BuscaFiltrada(String sql) throws SQLException{
        DefaultTableModel tabela = (DefaultTableModel) tblFornecedores.getModel();
        
        tabela.setRowCount(0);      
               
        Connection conn = ConexaoBD.Conectar();           
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        
        List<ProdutosData> produtoslist = new ArrayList<ProdutosData>();
             
        while(rs.next()){
            Object[] dados = new Object[7];
            dados[0] = rs.getInt("id");                        
            dados[1] = rs.getString("numerodocumento");
            dados[2] = rs.getString("fornecedor");
            dados[3] = rs.getString("valor");
            dados[4] = rs.getString("numeroparcela");
            dados[5] = rs.getString("vencimento");
            
            String data = (String) dados[5];
            char[] dataArray = data.toCharArray();
            data = conveter(dataArray);
            dados[5] = data;            
            dados[6] = rs.getString("status");            
            
            tabela.addRow(dados);
        }       
    }
    
    public static void Atualizar() throws SQLException{
        tblstatic = (DefaultTableModel) tblFornecedores.getModel();
        
        tblstatic.setRowCount(0);
        
        String sql = "SELECT * FROM `contaspagar` ORDER BY `vencimento` ASC";
        
        Connection conn = ConexaoBD.Conectar();           
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        
        List<ProdutosData> produtoslist = new ArrayList<ProdutosData>();
             
        while(rs.next()){
            Object[] dados = new Object[7];
            dados[0] = rs.getInt("id");
            dados[1] = rs.getString("numerodocumento");
            dados[2] = rs.getString("fornecedor");
            dados[3] = rs.getString("valor");
            dados[4] = rs.getString("numeroparcela");
            dados[5] = rs.getString("vencimento");
            
            data = (String) dados[5];
            char[] dataArray = data.toCharArray();
            data = conveter(dataArray);
            dados[5] = data;
            
            dados[6] = rs.getString("status");
            
            
            tblstatic.addRow(dados);
        }       
    }
    
    
    public static String conveter(char[] dataArray){
    
        String dataString = dataArray[8]+""+dataArray[9]+"/"+dataArray[5]+""+dataArray[6]+"/20"+dataArray[2]+dataArray[3];  
        
    return dataString;    
    }
    
    
    public String converterToDataBase(String data){
        char [] dataArray = data.toCharArray();
        data = dataArray[6]+""+dataArray[7]+""+dataArray[8]+""+dataArray[9]+"-"+dataArray[3]+""+dataArray[4]+"-"+dataArray[0]+""+dataArray[1];
        return data;        
    }
    
    
     public void BuscaDataTipoPagamento(String dataInicial, String dataFinal, String formaPagamento) throws SQLException{
        
        DefaultTableModel tabela = (DefaultTableModel) tblFornecedores.getModel();
        
        tabela.setRowCount(0);
        
        String sql1 = "SELECT idcompra, formapagamento FROM `contasreceber` WHERE STR_TO_DATE(datapagamento, '%d/%m/%Y') BETWEEN STR_TO_DATE('"+dataInicial+"', '%d/%m/%Y')AND STR_TO_DATE('"+dataFinal+"', '%d/%m/%Y')"
                + "AND formapagamento='"+formaPagamento+"' ORDER BY STR_TO_DATE(datapagamento, '%d/%m/%Y') ASC";
               
        Connection conn = ConexaoBD.Conectar();           
        PreparedStatement stmt = conn.prepareStatement(sql1);
        ResultSet rs = stmt.executeQuery();
       
             
        while(rs.next()){
            Object[] dados = new Object[5];
            dados[0] = rs.getInt("idcompra");
            dados[4] = rs.getString("formapagamento");
            
            
            String sql2 = "SELECT produto, quantidade FROM `itenscompras` WHERE idcompra="+dados[0];
            PreparedStatement stmt2 = conn.prepareStatement(sql2);
            ResultSet rs2 = stmt2.executeQuery();
            
            while(rs2.next()){
                dados[1] = rs2.getString("produto");
                dados[2] = rs2.getDouble("quantidade");
                
                System.out.println(dados[1]);
                
                String sql3 = "SELECT valorVenda FROM produtos WHERE nome='"+dados[1]+"'";
                PreparedStatement stmt3 = conn.prepareStatement(sql3);
                ResultSet rs3 = stmt3.executeQuery();
                
                while(rs3.next()){
                    dados[3] = rs3.getDouble("valorVenda");
                    tabela.addRow(dados);
                }
                
                
            }  
                       
            
        }       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> comboFormaPagamento;
    private javax.swing.JFormattedTextField fieldPeriodoFinal;
    private javax.swing.JFormattedTextField fieldPeriodoInicial;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tblFornecedores;
    // End of variables declaration//GEN-END:variables
}
